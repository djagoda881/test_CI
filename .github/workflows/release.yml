# GitHub action creating a release based on a new tag.
# The action only runs when a new tag is pushed to the main branch.

name: "Release"

on:
  push:
    tags:
      - "v*.*.*" # Match tags that start with 'v'
  workflow_dispatch:
    inputs:
      tag:
        description: Tag for automatic release
        required: true

  x

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - uses: fregante/setup-git-user@v2

      - name: Setting up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Setting up the environment
        run: pip install tomlkit
      
      - name: Setting a branch
        run: git checkout ci_action_unit_tests && git checkout -b post_release_branch

      - name: Get latest tag
        id: var
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            latest_tag=$(git describe --tags --abbrev=0)
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            latest_tag="${{ github.event.inputs.tag }}"
          fi
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
        shell: bash
        
      - name: Updating version in pyproject.toml
        run: |
          python .github/scripts/update_pyproject_version.py --tag ${{ steps.var.outputs.latest_tag }}

      - name: Commit changes
        run: |
          git add pyproject.toml
          git commit -m"ðŸš€ Updated files after release" || echo "No changes to commit"

      - name: create PR changes
        run: |
          DIFF=$(git log ci_action_unit_tests..post_release_branch)
          if [ -n "$DIFF" ]; then
            git push --set-upstream origin post_release_branch --force
            gh pr create -B ci_action_unit_tests -H post_release_branch --title 'Post release file updates' --body 'Created by Github action'
          else
            echo "No changes to commit between post_release_branch and main"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}

      - name: merge PR
        run: |
          gh pr merge --admin --squash -t "ðŸš€ Updated files after release"
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN}}

      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.TOKEN }}"
          automatic_release_tag: ${{ steps.var.outputs.latest_tag }}
          prerelease: false
